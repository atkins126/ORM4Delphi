unit Delphi.ORM.Test.Entity;

interface

uses Delphi.ORM.Attributes, Delphi.ORM.Nullable, Delphi.ORM.Lazy;

type
  [Entity]
  TAutoGeneratedClass = class
  private
    FId: Integer;
    FValue: String;
    FAnotherField: String;
  published
    [AutoGenerated]
    property Id: Integer read FId write FId;
    [AutoGenerated]
    property AnotherField: String read FAnotherField write FAnotherField;
    property Value: String read FValue write FValue;
  end;

  [Entity]
  TMyTestClass = class
  private
    FField: Integer;
    FName: String;
    FValue: Double;
    FPublicField: String;
  public
    property PublicField: String read FPublicField write FPublicField;
  published
    property Field: Integer read FField write FField;
    property Name: String read FName write FName;
    property Value: Double read FValue write FValue;
  end;

  [Entity]
  TClassOnlyPublic = class
  private
    FName: String;
    FValue: Integer;
  public
    property Name: String read FName write FName;
    property Value: Integer read FValue write FValue;
  end;

  [Entity]
  [PrimaryKey('Id2')]
  TClassWithPrimaryKeyAttribute = class
  private
    FId: Integer;
    FId2: Integer;
    FValue: Integer;
  published
    property Id: Integer read FId write FId;
    property Id2: Integer read FId2 write FId2;
    property Value: Integer read FValue write FValue;
  end;

  [Entity]
  TClassWithPrimaryKey = class
  private
    FId: Integer;
    FValue: Integer;
  published
    property Id: Integer read FId write FId;
    property Value: Integer read FValue write FValue;
  end;

  [Entity]
  TClassWithForeignKey = class
  private
    FAnotherClass: TClassWithPrimaryKey;
    FId: Integer;
  published
    property AnotherClass: TClassWithPrimaryKey read FAnotherClass write FAnotherClass;
    property Id: Integer read FId write FId;
  end;

  [Entity]
  TClassWithTwoForeignKey = class
  private
    FAnotherClass: TClassWithPrimaryKey;
    FAnotherClass2: TClassWithPrimaryKey;
    FId: Integer;
  published
    property AnotherClass: TClassWithPrimaryKey read FAnotherClass write FAnotherClass;
    property AnotherClass2: TClassWithPrimaryKey read FAnotherClass2 write FAnotherClass2;
    property Id: Integer read FId write FId;
  end;

  [Entity]
  TClassWithForeignKeyRecursive = class
  private
    FAnotherClass: TClassWithForeignKey;
    FId: Integer;
  published
    property AnotherClass: TClassWithForeignKey read FAnotherClass write FAnotherClass;
    property Id: Integer read FId write FId;
  end;

  TClassRecursiveThrid = class;

  [Entity]
  TClassRecursiveFirst = class
  private
    FId: Integer;
    FRecursive: TClassRecursiveThrid;
  published
    property Id: Integer read FId write FId;
    property Recursive: TClassRecursiveThrid read FRecursive write FRecursive;
  end;

  [Entity]
  TClassRecursiveSecond = class
  private
    FId: Integer;
    FRecursive: TClassRecursiveFirst;
  published
    property Id: Integer read FId write FId;
    property Recursive: TClassRecursiveFirst read FRecursive write FRecursive;
  end;

  [Entity]
  TClassRecursiveThrid = class
  private
    FId: Integer;
    FRecursive: TClassRecursiveSecond;
  published
    property Id: Integer read FId write FId;
    property Recursive: TClassRecursiveSecond read FRecursive write FRecursive;
  end;

  TClassHierarchy2 = class;
  TClassHierarchy3 = class;

  [Entity]
  TClassHierarchy1 = class
  private
    FClass1: TClassHierarchy2;
    FId: Integer;
    FClass3: TClassHierarchy3;
  published
    property Class1: TClassHierarchy2 read FClass1 write FClass1;
    property Class2: TClassHierarchy3 read FClass3 write FClass3;
    property Id: Integer read FId write FId;
  end;

  [Entity]
  TClassHierarchy2 = class
  private
    FId: Integer;
    FClass2: TClassHierarchy1;
    FClass3: TClassHierarchy1;
  published
    property Class3: TClassHierarchy1 read FClass2 write FClass2;
    property Class4: TClassHierarchy1 read FClass3 write FClass3;
    property Id: Integer read FId write FId;
  end;

  [Entity]
  TClassHierarchy3 = class
  private
    FId: Integer;
    FValue: String;
  published
    property Id: Integer read FId write FId;
    property Value: String read FValue write FValue;
  end;

  [Entity]
  TClassRecursiveItself = class
  private
    FId: Integer;
    FRecursive1: TClassRecursiveItself;
    FRecursive2: TClassRecursiveItself;
  published
    property Id: Integer read FId write FId;
    property Recursive1: TClassRecursiveItself read FRecursive1 write FRecursive1;
    property Recursive2: TClassRecursiveItself read FRecursive2 write FRecursive2;
  end;

  TMyEntityWithManyValueAssociation = class;

  [Entity]
  TMyEntityWithManyValueAssociationChild = class
  private
    FId: Integer;
    FManyValueAssociation: TMyEntityWithManyValueAssociation;
  published
    property Id: Integer read FId write FId;
    property ManyValueAssociation: TMyEntityWithManyValueAssociation read FManyValueAssociation write FManyValueAssociation;
  end;

  [Entity]
  TMyEntityWithManyValueAssociation = class
  private
    FId: Integer;
    FManyValueAssociation: TArray<TMyEntityWithManyValueAssociationChild>;
  published
    property Id: Integer read FId write FId;
    [ManyValueAssociationLinkName('ManyValueAssociation')]
    property ManyValueAssociationList: TArray<TMyEntityWithManyValueAssociationChild> read FManyValueAssociation write FManyValueAssociation;
  end;

  [Entity]
  TMyEntityWithPrimaryKeyInLastField = class
  private
    FField1: Integer;
    FField2: Integer;
    FField3: String;
    FId: Integer;
  published
    property Field1: Integer read FField1 write FField1;
    property Field2: Integer read FField2 write FField2;
    property Field3: String read FField3 write FField3;
    property Id: Integer read FId write FId;
  end;

  [Entity]
  [PrimaryKey('Name')]
  TMyClass = class
  private
    FName: String;
    FValue: Integer;
  published
    property Name: String read FName write FName;
    property Value: Integer read FValue write FValue;
  end;

  TMyEnumerator = (Enum1, Enum2, Enum3, Enum4);

  [Entity]
  TMyClassWithSpecialTypes = class
  private
    FGuid: TGUID;
    FEnumerator: TMyEnumerator;
  published
    property Enumerator: TMyEnumerator read FEnumerator write FEnumerator;
    property Guid: TGUID read FGuid write FGuid;
  end;

  [Entity]
  TClassForeignKey = class
  private
    FId: Integer;
    FField1: String;
    FField2: Double;
  published
    property Id: Integer read FId write FId;
    property Field1: String read FField1 write FField1;
    property Field2: Double read FField2 write FField2;
  end;

  [Entity]
  TClassWithThreeForeignKey = class
  private
    FId: Integer;
    FForeignKey1: TClassForeignKey;
    FForeignKey2: TClassForeignKey;
    FForeignKey3: TClassForeignKey;
  published
    property Id: Integer read FId write FId;
    property ForeignKey1: TClassForeignKey read FForeignKey1 write FForeignKey1;
    property ForeignKey2: TClassForeignKey read FForeignKey2 write FForeignKey2;
    property ForeignKey3: TClassForeignKey read FForeignKey3 write FForeignKey3;
  end;

  [Entity]
  TClassWithSubForeignKey = class
  private
    FId: Integer;
    FForeignKey2: TClassWithThreeForeignKey;
    FForeignKey1: TClassWithThreeForeignKey;
  published
    property Id: Integer read FId write FId;
    property ForeignKey1: TClassWithThreeForeignKey read FForeignKey1 write FForeignKey1;
    property ForeignKey2: TClassWithThreeForeignKey read FForeignKey2 write FForeignKey2;
  end;

  TManyValueAssociationParent = class;

  [Entity]
  TManyValueAssociationWithThreeForeignKey = class
  private
    FId: Integer;
    FForeingKeyOne: TManyValueAssociationParent;
    FForeingKeyTwo: TManyValueAssociationParent;
    FManyValueAssociationParent: TManyValueAssociationParent;
  published
    property Id: Integer read FId write FId;
    property ForeingKeyOne: TManyValueAssociationParent read FForeingKeyOne write FForeingKeyOne;
    property ForeingKeyTwo: TManyValueAssociationParent read FForeingKeyTwo write FForeingKeyTwo;
    property ManyValueAssociationParent: TManyValueAssociationParent read FManyValueAssociationParent write FManyValueAssociationParent;
  end;

  [Entity]
  TManyValueAssociationParent = class
  private
    FId: Integer;
    FChildClass: TArray<TManyValueAssociationWithThreeForeignKey>;
  published
    property Id: Integer read FId write FId;
    property ChildClass: TArray<TManyValueAssociationWithThreeForeignKey> read FChildClass write FChildClass;
  end;

  TManyValueAssociationParentNoLink = class
  private
    FChildClass: TArray<TManyValueAssociationWithThreeForeignKey>;
    FId: Integer;
  published
    property Id: Integer read FId write FId;
    property ChildClass: TArray<TManyValueAssociationWithThreeForeignKey> read FChildClass write FChildClass;
  end;

  [Entity]
  TMyEntity = class
  private
    FId: Integer;
    FName: String;
    FValue: Double;
    FPublicField: String;
  public
    property PublicField: String read FPublicField write FPublicField;
  published
    [AutoGenerated]
    property Id: Integer read FId write FId;
    property Name: String read FName write FName;
    property Value: Double read FValue write FValue;
  end;

  [Entity]
  [TableName('AnotherTableName')]
  TMyEntity2 = class
  private
    FId: Integer;
    FName: String;
    FValue: Double;
    FAField: Integer;
  published
    property AField: Integer read FAField write FAField;
    property Id: Integer read FId write FId;
    property Name: String read FName write FName;
    property Value: Double read FValue write FValue;
  end;

  [Entity]
  TMyEntity3 = class
  private
    FId: Integer;
  published
    property Id: Integer read FId write FId;
  end;

  [Entity]
  [PrimaryKey('Value')]
  TMyEntityWithPrimaryKey = class
  private
    FId: Integer;
    FValue: Double;
  published
    property Id: Integer read FId write FId;
    property Value: Double read FValue write FValue;
  end;

  [Entity]
  TMyEntityWithFieldNameAttribute = class
  private
    FName: String;
    FMyForeignKey: TMyEntityWithPrimaryKey;
    FMyForeignKey2: TMyEntity2;
  published
    [FieldName('AnotherFieldName')]
    property Name: String read FName write FName;
    property MyForeignKey: TMyEntityWithPrimaryKey read FMyForeignKey write FMyForeignKey;
    property MyForeignKey2: TMyEntity2 read FMyForeignKey2 write FMyForeignKey2;
  end;

  TMyEntityWithoutEntityAttribute = class
  private
    FId: Integer;
    FName: String;
    FValue: Double;
  published
    property Id: Integer read FId write FId;
    property Name: String read FName write FName;
    property Value: Double read FValue write FValue;
  end;

  [Entity]
  TAAAA = class
  private
    FId: Integer;
    FValue: String;
  published
    property Id: Integer read FId write FId;
    property Value: String read FValue write FValue;
  end;

  [Entity]
  TZZZZ = class
  private
    FId: Integer;
    FAAAA: TAAAA;
  published
    property AAAA: TAAAA read FAAAA write FAAAA;
    property Id: Integer read FId write FId;
  end;

  [Entity]
  TMyEntityWithoutPrimaryKey = class
  private
    FValue: String;
  published
    property Value: String read FValue write FValue;
  end;

  TMyEntityForeignKeyToClassWithoutPrimaryKey = class
  private
    FValue: String;
    FId: Integer;
    FForerignKey: TMyEntityWithoutPrimaryKey;
  published
    property Id: Integer read FId write FId;
    property ForerignKey: TMyEntityWithoutPrimaryKey read FForerignKey write FForerignKey;
    property Value: String read FValue write FValue;
  end;

  [Entity]
  [SingleTableInheritance]
  TMyEntityWithSingleTableInheritanceAttribute = class
  private
    FId: Integer;
    FBaseProperty: String;
  published
    property BaseProperty: String read FBaseProperty write FBaseProperty;
    property Id: Integer read FId write FId;
  end;

  [Entity]
  TMyEntityInheritedFromSingle = class(TMyEntityWithSingleTableInheritanceAttribute)
  private
    FAnotherProperty: String;
  published
    property AnotherProperty: String read FAnotherProperty write FAnotherProperty;
  end;

  [Entity]
  TMyEntityInheritedFromSimpleClass = class(TMyEntityInheritedFromSingle)
  private
    FSimpleProperty: Integer;
  published
    property SimpleProperty: Integer read FSimpleProperty write FSimpleProperty;
  end;

  TMyEntityAlias = class;

  TMyEntityWithForeignKeyAlias = class
  private
    FId: Integer;
    FForeignKey: TMyEntity;
  published
    property ForeignKey: TMyEntity read FForeignKey write FForeignKey;
    property Id: Integer read FId write FId;
  end;

  TMyEntityAlias = class
  private
    FId: Integer;
  published
    property Id: Integer read FId write FId;
  end;

  [Entity]
  [PrimaryKey('Integer')]
  TMyEntityWithAllTypeOfFields = class
  private
    FString: String;
    FInteger: Integer;
    FChar: Char;
    FAnsiString: AnsiString;
    FAnsiChar: AnsiChar;
    FInt64: Int64;
    FFloat: Double;
    FEnumerator: TMyEnumerator;
    FGUID: TGUID;
    FDate: TDate;
    FTime: TTime;
    FDateTime: TDateTime;
    FClass: TMyEntityWithPrimaryKey;
    FEmptyClass: TMyEntityWithPrimaryKey;
  published
    property AnsiChar: AnsiChar read FAnsiChar write FAnsiChar;
    property AnsiString: AnsiString read FAnsiString write FAnsiString;
    property Char: Char read FChar write FChar;
    property Enumerator: TMyEnumerator read FEnumerator write FEnumerator;
    property Float: Double read FFloat write FFloat;
    property GUID: TGUID read FGUID write FGUID;
    property Integer: Integer read FInteger write FInteger;
    property Int64: Int64 read FInt64 write FInt64;
    property &String: String read FString write FString;
    property &Class: TMyEntityWithPrimaryKey read FClass write FClass;
    property EmptyClass: TMyEntityWithPrimaryKey read FEmptyClass write FEmptyClass;
    property Date: TDate read FDate write FDate;
    property DateTime: TDateTime read FDateTime write FDateTime;
    property Time: TTime read FTime write FTime;
  end;

  TMyChildClass = class;
  TMyClassParent = class;

  [Entity]
  TMyChildChildClass = class
  private
    FId: Integer;
    FValue: String;
    FMyChildClass: TMyChildClass;
  published
    property Id: Integer read FId write FId;
    property MyChildClass: TMyChildClass read FMyChildClass write FMyChildClass;
    property Value: String read FValue write FValue;
  end;

  [Entity]
  TMyChildClass = class
  private
    FId: Integer;
    FValue: String;
    FChild: TArray<TMyChildChildClass>;
    FMyClassParent: TMyClassParent;
  published
    property Child: TArray<TMyChildChildClass> read FChild write FChild;
    property Id: Integer read FId write FId;
    property MyClassParent: TMyClassParent read FMyClassParent write FMyClassParent;
    property Value: String read FValue write FValue;
  end;

  [Entity]
  TMyClassParent = class
  private
    FId: Integer;
    FChild: TArray<TMyChildClass>;
  published
    property Child: TArray<TMyChildClass> read FChild write FChild;
    property Id: Integer read FId write FId;
  end;

  [Entity]
  TWhereClassTest = class
  private
    FMyField: Integer;
    FField1: Integer;
    FField2: Integer;
    FField3: Integer;
    FField4: Integer;
    FValue: Integer;
    FWhere: TClassHierarchy1;
    FId: Integer;
  published
    property Field1: Integer read FField1 write FField1;
    property Field2: Integer read FField2 write FField2;
    property Field3: Integer read FField3 write FField3;
    property Field4: Integer read FField4 write FField4;
    property Id: Integer read FId write FId;
    property MyField: Integer read FMyField write FMyField;
    property Value: Integer read FValue write FValue;
    property Where: TClassHierarchy1 read FWhere write FWhere;
  end;

  [Entity]
  TClassWithNullableProperty = class
  private
    FId: Integer;
    FNullable: Nullable<Integer>;
  published
    property Id: Integer read FId write FId;
    property Nullable: Nullable<Integer> read FNullable write FNullable;
  end;

  TClassWithPrimaryKeyNullableProperty = class
  private
    FId: Nullable<Integer>;
  published
    property Id: Nullable<Integer> read FId write FId;
  end;

  [Entity]
  TLazyClass = class
  private
    FId: Integer;
    FLazy: Lazy<TMyEntity>;
  published
    property Id: Integer read FId write FId;
    property Lazy: Lazy<TMyEntity> read FLazy write FLazy;
  end;

  [Entity]
  TUnorderedClass = class
  private
    FAField: String;
    FBField: Integer;
    FId: Integer;
    FAManyValue: TArray<TUnorderedClass>;
    FBManyValue: TArray<TUnorderedClass>;
    FBForeignKey: TUnorderedClass;
    FAForeignKey: TUnorderedClass;
    FALazy: Lazy<TUnorderedClass>;
    FBLazy: Lazy<TUnorderedClass>;
    FLastField: String;
  published
    property BField: Integer read FBField write FBField;
    property AField: String read FAField write FAField;
    property Id: Integer read FId write FId;
    [ManyValueAssociationLinkName('BForeignKey')]
    property BManyValue: TArray<TUnorderedClass> read FBManyValue write FBManyValue;
    [ManyValueAssociationLinkName('AForeignKey')]
    property AManyValue: TArray<TUnorderedClass> read FAManyValue write FAManyValue;
    property BLazy: Lazy<TUnorderedClass> read FBLazy write FBLazy;
    property ALazy: Lazy<TUnorderedClass> read FALazy write FALazy;
    property BForeignKey: TUnorderedClass read FBForeignKey write FBForeignKey;
    property AForeignKey: TUnorderedClass read FAForeignKey write FAForeignKey;
    property LastField: String read FLastField write FLastField;
  end;

implementation

end.

